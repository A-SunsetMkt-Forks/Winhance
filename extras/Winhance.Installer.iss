; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Winhance"
#define MyAppVersion ""
#define MyAppPublisher "Marco du Plessis"
#define MyAppURL "https://www.winhance.net/"
#define MyAppExeName "Winhance.exe"
#define DotNetRuntimeVersion "9.0.4"
#define DotNetRuntimeInstallerName "windowsdesktop-runtime-" + DotNetRuntimeVersion + "-win-x64.exe"
#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".winhance"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{29282B88-03C4-430E-8A41-CF14F8186AD8}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName=Winhance
SetupMutex=WinhanceSetupMutex,Global
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
UninstallDisplayIcon={app}\{#MyAppExeName}
; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
ChangesAssociations=yes
DisableProgramGroupPage=yes
LicenseFile=C:\Winhance\LICENSE.txt
; Uncomment the following line to run in non administrative install mode (install for current user only).
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir=C:\Winhance\installer-output
OutputBaseFilename=Winhance.Installer
SetupIconFile=C:\Winhance\src\Winhance.WPF\Resources\AppIcons\winhance-rocket.ico
SolidCompression=yes
WizardStyle=modern
; Allow user to select installation type
DisableDirPage=no
; Only create uninstaller for regular installations
Uninstallable=WizardIsTaskSelected('regularinstall')
; Close applications before installation/uninstallation
CloseApplications=yes
CloseApplicationsFilter=*{#MyAppExeName}

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Code]
function ShouldInstallDotNetRuntime: Boolean;
begin
  // For regular installation, always install .NET Runtime
  // For portable installation, check if the user wants to install it
  if WizardIsTaskSelected('portableinstall') and not WizardIsTaskSelected('portableinstall\dotnetruntime') then
    Result := False
  else
    Result := True;  // Always install for regular installation or if checkbox is selected
end;

function InitializeUninstall(): Boolean;
var
  ErrorCode: Integer;
begin
  Result := True;
  // Check if the application is running and ask to close it
  if CheckForMutexes('WinhanceSetupMutex') then
  begin
    if MsgBox('Winhance is currently running. Do you want to close it before uninstalling?', 
              mbConfirmation, MB_YESNO) = IDYES then
    begin
      // Try to close the application gracefully
      ShellExec('open', 'taskkill.exe', '/f /im {#MyAppExeName}', '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);
    end;
  end;
end;

// Clean up old installation files while preserving user data
procedure CleanupOldInstallation;
var
  FindRec: TFindRec;
  OldInstallPath: String;
  ScriptsPath: String;
  HasScriptsFolder: Boolean;
begin
  OldInstallPath := ExpandConstant('{app}');
  ScriptsPath := OldInstallPath + '\Scripts';
  HasScriptsFolder := DirExists(ScriptsPath);
  
  // Only perform cleanup if this is an update (directory already exists)
  if DirExists(OldInstallPath) then
  begin
    // Delete all files in the root directory
    if FindFirst(OldInstallPath + '\*.*', FindRec) then
    begin
      try
        repeat
          if (FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY) = 0 then
            DeleteFile(OldInstallPath + '\' + FindRec.Name);
        until not FindNext(FindRec);
      finally
        FindClose(FindRec);
      end;
    end;
    
    // Delete all subdirectories except Scripts
    if FindFirst(OldInstallPath + '\*.*', FindRec) then
    begin
      try
        repeat
          if ((FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY) <> 0) and
             (FindRec.Name <> '.') and (FindRec.Name <> '..') and
             (CompareText(FindRec.Name, 'Scripts') <> 0) then
            DelTree(OldInstallPath + '\' + FindRec.Name, True, True, True);
        until not FindNext(FindRec);
      finally
        FindClose(FindRec);
      end;
    end;
  end;
end;

var
  UserSelectedDir: String;
  IsFirstRun: Boolean;

procedure InitializeWizard;
begin
  // Initialize variables
  IsFirstRun := True;
  UserSelectedDir := '';
end;

// This function runs right before the actual installation starts
function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
  // Clean up old installation files while preserving user data
  CleanupOldInstallation;
  Result := '';
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  Result := True;
  
  // Save user-selected directory when leaving the directory selection page
  if CurPageID = wpSelectDir then
  begin
    UserSelectedDir := WizardForm.DirEdit.Text;
  end;
  
  // Set default directory based on installation type when tasks page is shown for the first time
  if CurPageID = wpSelectTasks then
  begin
    if IsFirstRun then
    begin
      IsFirstRun := False;
      if WizardIsTaskSelected('portableinstall') and (UserSelectedDir = '') then
        WizardForm.DirEdit.Text := ExpandConstant('{userdesktop}\{#MyAppName}')
      else if WizardIsTaskSelected('regularinstall') and (UserSelectedDir = '') then
        WizardForm.DirEdit.Text := ExpandConstant('{autopf}\{#MyAppName}');
    end;
  end;
  
  // Restore user's custom directory selection after task selection
  if (CurPageID = wpSelectTasks) and (UserSelectedDir <> '') then
  begin
    WizardForm.DirEdit.Text := UserSelectedDir;
  end;
end;

[Tasks]
Name: "portableinstall"; Description: "Perform a portable installation"; GroupDescription: "Installation type:"; Flags: unchecked exclusive
Name: "portableinstall\dotnetruntime"; Description: "Install .NET 9 Runtime (recommended)"; GroupDescription: "Portable options:"; Flags: unchecked
Name: "regularinstall"; Description: "Perform a regular installation"; GroupDescription: "Installation type:"; Flags: exclusive
Name: "regularinstall\desktopicon"; Description: "Create a shortcut on the Desktop"; GroupDescription: "Additional shortcuts:"; Flags: unchecked
Name: "regularinstall\startmenuicon"; Description: "Create a shortcut in the Start menu"; GroupDescription: "Additional shortcuts:"; Flags: unchecked

[Files]
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\*.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\*.json"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\*.pdb"; DestDir: "{app}"; Flags: ignoreversion
; Copy only necessary Windows x64 runtime files
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\runtimes\win\*"; DestDir: "{app}\runtimes\win"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\runtimes\win-x64\*"; DestDir: "{app}\runtimes\win-x64"; Flags: ignoreversion recursesubdirs createallsubdirs
; Copy language folders for internationalization
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\cs\*"; DestDir: "{app}\cs"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\de\*"; DestDir: "{app}\de"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\es\*"; DestDir: "{app}\es"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\fr\*"; DestDir: "{app}\fr"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\it\*"; DestDir: "{app}\it"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\ja\*"; DestDir: "{app}\ja"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\ko\*"; DestDir: "{app}\ko"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\pl\*"; DestDir: "{app}\pl"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\pt-BR\*"; DestDir: "{app}\pt-BR"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\ru\*"; DestDir: "{app}\ru"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\tr\*"; DestDir: "{app}\tr"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\zh-Hans\*"; DestDir: "{app}\zh-Hans"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Winhance\src\Winhance.WPF\bin\Release\net9.0-windows\win-x64\zh-Hant\*"; DestDir: "{app}\zh-Hant"; Flags: ignoreversion recursesubdirs createallsubdirs
; Include .NET 9 Runtime installer
Source: "C:\Winhance\extras\prerequisites\{#DotNetRuntimeInstallerName}"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall
; Create a marker file for portable installations
Source: "C:\Winhance\extras\prerequisites\{#DotNetRuntimeInstallerName}"; DestDir: "{app}"; DestName: "portable.marker"; Flags: ignoreversion; Tasks: portableinstall
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
; Skip registry entries for portable installation
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue; Tasks: regularinstall
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey; Tasks: regularinstall
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"; Tasks: regularinstall
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""; Tasks: regularinstall

[Icons]
; Create Start menu shortcut only if selected in tasks
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: regularinstall\startmenuicon
; Create desktop shortcut only if selected in tasks
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: regularinstall\desktopicon

[Run]
; Install .NET 9 Runtime (always for regular installation, optional for portable)
Filename: "{tmp}\{#DotNetRuntimeInstallerName}"; Parameters: "/install /quiet /norestart"; StatusMsg: "Installing .NET 9 Runtime..."; Flags: waituntilterminated; Check: ShouldInstallDotNetRuntime

; Launch application after installation
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
; Delete all files and directories that might remain after uninstallation
Type: files; Name: "{app}\*.dll"
Type: files; Name: "{app}\*.exe"
Type: files; Name: "{app}\*.json"
Type: files; Name: "{app}\*.config"
Type: files; Name: "{app}\*.pdb"
Type: files; Name: "{app}\*.xml"
Type: files; Name: "{app}\*.log"
Type: filesandordirs; Name: "{app}\runtimes"
Type: filesandordirs; Name: "{app}\Scripts"
Type: filesandordirs; Name: "{app}\*"
Type: dirifempty; Name: "{app}"

