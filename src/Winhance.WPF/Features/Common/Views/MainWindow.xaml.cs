﻿using System;
using System.Windows.Media;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Media.Imaging;
using Winhance.Core.Features.Common.Interfaces;
using Winhance.Core.Features.Common.Messaging;
using Winhance.Core.Features.Common.Enums;
using Winhance.WPF.Features.Common.Resources.Theme;
using Winhance.WPF.Features.Common.Services;
using Winhance.WPF.Features.Common.Utilities;
using Winhance.WPF.Features.Common.ViewModels;

namespace Winhance.WPF.Features.Common.Views
{
    public partial class MainWindow : Window
    {
        private readonly Winhance.Core.Features.Common.Interfaces.INavigationService _navigationService = null!;
        private WindowSizeManager _windowSizeManager;
        private readonly UserPreferencesService _userPreferencesService;
        private void LogDebug(string message, Exception? ex = null)
        {
            string fullMessage = message + (ex != null ? $" - Exception: {ex.Message}" : "");
            
            // Use proper logging service for application logging
            _messengerService?.Send(
                new LogMessage
                {
                    Message = fullMessage,
                    Level = ex != null ? LogLevel.Error : LogLevel.Debug,
                    Exception = ex,
                }
            );
            
            // Also log to diagnostic file for troubleshooting
            FileLogger.Log("MainWindow", fullMessage);
            
            // If there's an exception, log the stack trace as well
            if (ex != null)
            {
                FileLogger.Log("MainWindow", $"Stack trace: {ex.StackTrace}");
            }
        }

        public MainWindow()
        {
            LogDebug("Default constructor called - THIS SHOULD NOT HAPPEN");
            try
            {
                // Don't worry about this error, it is initialized at runtime.
                InitializeComponent();
                LogDebug("Default constructor completed initialization");

                // Direct event handlers for window control buttons
                this.MinimizeButton.Click += (s, e) => this.WindowState = WindowState.Minimized;
                this.MaximizeRestoreButton.Click += (s, e) => {
                    this.WindowState = (this.WindowState == WindowState.Maximized) ?
                        WindowState.Normal : WindowState.Maximized;
                };
                this.CloseButton.Click += CloseButton_Click;
            }
            catch (Exception ex)
            {
                LogDebug("Error in default constructor", ex);
                throw;
            }
        }

        // No need to define InitializeComponent here, it's generated by the WPF build system

        public MainWindow(
            IThemeManager themeManager,
            IServiceProvider serviceProvider,
            IMessengerService messengerService,
            Winhance.Core.Features.Common.Interfaces.INavigationService navigationService,
            UserPreferencesService userPreferencesService
        )
        {
            LogDebug("Parameterized constructor starting");

            try
            {
                LogDebug("Checking dependencies");
                if (themeManager == null)
                    throw new ArgumentNullException(nameof(themeManager));
                if (serviceProvider == null)
                    throw new ArgumentNullException(nameof(serviceProvider));
                if (messengerService == null)
                    throw new ArgumentNullException(nameof(messengerService));

                LogDebug("Dependencies verified");

                // Let the build system initialize the component
                try
                {
                    LogDebug("Starting InitializeComponent");
                    InitializeComponent();
                    LogDebug("InitializeComponent completed");

                    // Direct event handlers for window control buttons
                    this.MinimizeButton.Click += (s, e) => this.WindowState = WindowState.Minimized;
                    this.MaximizeRestoreButton.Click += (s, e) => {
                        this.WindowState = (this.WindowState == WindowState.Maximized) ?
                            WindowState.Normal : WindowState.Maximized;

                        // Update button content when window state changes
                        if (DataContext is MainViewModel viewModel)
                        {
                            viewModel.MaximizeButtonContent =
                                (this.WindowState == WindowState.Maximized) ? "WindowRestore" : "WindowMaximize";
                        }
                    };
                    this.CloseButton.Click += CloseButton_Click;
                }
                catch (Exception ex)
                {
                    LogDebug("Error in InitializeComponent", ex);
                    // This is not ideal, but we'll continue since the constructor errors will be handled
                }

                LogDebug("Setting fields");
                _themeManager = themeManager;
                _serviceProvider = serviceProvider;
                _messengerService = messengerService;
                _navigationService = navigationService;
                
                // Create the window size manager
                try
                {
                    var logService = _serviceProvider.GetService(typeof(ILogService)) as ILogService;
                    
                    if (userPreferencesService != null && logService != null)
                    {
                        _windowSizeManager = new WindowSizeManager(this, userPreferencesService, logService);
                        LogDebug("WindowSizeManager created successfully");
                    }
                    else
                    {
                        LogDebug("Could not create WindowSizeManager: services not available");
                    }
                }
                catch (Exception ex)
                {
                    LogDebug($"Error creating WindowSizeManager: {ex.Message}", ex);
                }
                _userPreferencesService = userPreferencesService ?? throw new ArgumentNullException(nameof(userPreferencesService));
                LogDebug("Fields set");

                // Hook up events for ContentPresenter-based navigation
                if (_navigationService is Winhance.Core.Features.Common.Interfaces.INavigationService navService)
                {
                    LogDebug("Setting up navigation service for ContentPresenter-based navigation");

                    // Add PreviewMouseWheel event handler for better scrolling
                    this.PreviewMouseWheel += MainWindow_PreviewMouseWheel;
                    
                    // We'll navigate once the window is fully loaded
                    this.Loaded += (sender, e) =>
                    {
                        LogDebug("Window loaded, navigating to default view");

                        // Apply the theme to ensure all toggle switches are properly initialized
                        try
                        {
                            LogDebug("Applying theme to initialize toggle switches");
                            if (_themeManager != null)
                            {
                                // Apply the theme which will update all toggle switches
                                _themeManager.ApplyTheme();
                                LogDebug("Successfully initialized toggle switches");

                                // Update the app icon based on the theme
                                UpdateThemeIcon();
                            }
                        }
                        catch (Exception ex)
                        {
                            LogDebug($"Error initializing toggle switches: {ex.Message}", ex);
                        }

                        if (DataContext is MainViewModel mainViewModel)
                        {
                            try
                            {
                                // Navigate to SoftwareApps view by default
                                LogDebug("Navigating to SoftwareApps view");
                                _navigationService.NavigateTo("SoftwareApps");

                                // Verify that navigation succeeded
                                if (mainViewModel.CurrentViewModel == null)
                                {
                                    LogDebug("WARNING: Navigation succeeded but CurrentViewModel is null");
                                }
                                else
                                {
                                    LogDebug($"Navigation succeeded, CurrentViewModel is {mainViewModel.CurrentViewModel.GetType().Name}");
                                }
                            }
                            catch (Exception ex)
                            {
                                LogDebug($"Error navigating to SoftwareApps view: {ex.Message}", ex);

                                // Try to recover by navigating to another view
                                try
                                {
                                    LogDebug("Attempting to navigate to About view as fallback");
                                    _navigationService.NavigateTo("About");
                                }
                                catch (Exception fallbackEx)
                                {
                                    LogDebug($"Error navigating to fallback view: {fallbackEx.Message}", fallbackEx);
                                }
                            }
                        }
                        else
                        {
                            LogDebug($"DataContext is not MainViewModel, it is {DataContext?.GetType().Name ?? "null"}");
                        }
                    };

                    // Add StateChanged event to update Maximize/Restore button content only
                    this.StateChanged += (sender, e) => {
                        if (DataContext is MainViewModel viewModel)
                        {
                            viewModel.MaximizeButtonContent =
                                (this.WindowState == WindowState.Maximized) ? "WindowRestore" : "WindowMaximize";
                        }
                    };
                    
                    // We no longer save window position/size to preferences
                }
                else
                {
                    LogDebug($"_navigationService is not INavigationService, it is {_navigationService?.GetType().Name ?? "null"}");
                }

                // Register for window state messages
                LogDebug("Registering for window state messages");
                _messengerService.Register<WindowStateMessage>(this, HandleWindowStateMessage);
                LogDebug("Registered for window state messages");

                // Add Closing event handler to log the closing process
                this.Closing += MainWindow_Closing;
                
                // Clean up when window is closed
                this.Closed += (sender, e) =>
                {
                    LogDebug("Window closed, unregistering from messenger service");
                    _messengerService.Unregister(this);
                };

                LogDebug($"DataContext is {(DataContext == null ? "null" : "not null")}");
            }
            catch (Exception ex)
            {
                LogDebug("Error in parameterized constructor", ex);
                throw;
            }
        }

        private async void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            LogDebug("*** CLOSE BUTTON CLICKED ***");
            
            // Add a debug breakpoint here
            System.Diagnostics.Debug.WriteLine("CloseButton_Click event handler called");
            
            // Log the current state of the application
            LogDebug($"MainWindow state: {this.WindowState}");
            LogDebug($"DataContext type: {(DataContext?.GetType().FullName ?? "null")}");
            
            try
            {
                // Check if we should show the donation dialog by checking user preferences
                bool showDialog = true;
                
                // First check if the user has opted out of seeing the donation dialog
                MainViewModel viewModel = null;
                if (DataContext is MainViewModel vm)
                {
                    viewModel = vm;
                    try
                    {
                        // Get the preferences file path for logging
                        string preferencesFilePath = Path.Combine(
                            Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                            "Winhance", "Config", "UserPreferences.json");
                        
                        LogDebug($"Preferences file path: {preferencesFilePath}");
                        LogDebug($"Preferences file exists: {File.Exists(preferencesFilePath)}");
                        
                        // Try to read the file directly to check for DontShowSupport preference
                        if (File.Exists(preferencesFilePath))
                        {
                            string json = File.ReadAllText(preferencesFilePath);
                            LogDebug($"Raw preferences file content: {json}");
                            
                            // Check if the preference is set to true
                            if (json.Contains("\"DontShowSupport\": true") ||
                                json.Contains("\"DontShowSupport\":true") ||
                                json.Contains("\"DontShowSupport\": 1") ||
                                json.Contains("\"DontShowSupport\":1"))
                            {
                                LogDebug("DontShowSupport is set to true in preferences file, skipping dialog");
                                showDialog = false;
                            }
                        }
                    }
                    catch (Exception prefEx)
                    {
                        LogDebug($"Error checking donation dialog preference: {prefEx.Message}", prefEx);
                        // Continue showing the dialog if there's an error
                    }
                }
                
                // Only show the dialog if the user hasn't opted out
                DonationDialog? dialog = null;
                if (showDialog)
                {
                    LogDebug("Showing donation dialog directly");
                    
                    // Show the dialog - header text is now defined in XAML
                    string supportMessage = "Your support helps keep this project going!";
                    
                    // Show the dialog
                    dialog = await DonationDialog.ShowDonationDialogAsync(
                        "Support Winhance",
                        supportMessage,
                        "Click 'Yes' to show your support!");
                }
                else
                {
                    LogDebug("Skipping donation dialog due to user preference");
                }
                
                LogDebug($"Donation dialog completed with result: {dialog?.DialogResult}, DontShowAgain: {dialog?.DontShowAgain}");
                
                // Always save the "Don't show again" preference regardless of which button was clicked
                if (dialog != null && viewModel != null)
                {
                    // Always log the DontShowAgain value for debugging
                    LogDebug($"DontShowAgain value: {dialog.DontShowAgain}");
                    
                    // Save the preference if the checkbox is checked
                    if (dialog.DontShowAgain)
                    {
                        try
                        {
                            LogDebug("Saving DontShowSupport preference");
                            await viewModel.SaveDontShowSupportPreferenceAsync(true);
                            LogDebug("Successfully saved DontShowSupport preference");
                        }
                        catch (Exception prefEx)
                        {
                            LogDebug($"ERROR saving support preference: {prefEx.Message}", prefEx);
                        }
                    }
                }
                else
                {
                    LogDebug($"Cannot save preference: dialog is {(dialog == null ? "null" : "not null")}, DataContext is {(DataContext is MainViewModel ? "MainViewModel" : DataContext?.GetType().Name ?? "null")}");
                }
                
                // Open the donation page if the user clicked Yes
                if (dialog?.DialogResult == true)
                {
                    LogDebug("User clicked Yes on donation dialog, opening donation page");
                    
                    try
                    {
                        var psi = new System.Diagnostics.ProcessStartInfo
                        {
                            FileName = "https://ko-fi.com/memstechtips",
                            UseShellExecute = true
                        };
                        System.Diagnostics.Process.Start(psi);
                        LogDebug("Donation page opened successfully");
                    }
                    catch (Exception openEx)
                    {
                        LogDebug($"ERROR opening donation page: {openEx.Message}", openEx);
                    }
                }
                
                // Close the application
                LogDebug("Closing the application");
                this.Close();
                LogDebug("Close() called successfully");
            }
            catch (Exception ex)
            {
                LogDebug($"ERROR in CloseButton_Click: {ex.Message}", ex);
                
                // Fallback to direct close if there's an error
                LogDebug("Falling back to direct close due to error");
                try
                {
                    this.Close();
                    LogDebug("Direct close called successfully");
                }
                catch (Exception closeEx)
                {
                    LogDebug($"ERROR in direct close: {closeEx.Message}", closeEx);
                }
            }
        }

        private void MainWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            LogDebug("*** WINDOW CLOSING EVENT TRIGGERED ***");
            LogDebug($"Current thread ID: {System.Threading.Thread.CurrentThread.ManagedThreadId}");
            LogDebug($"Is on UI thread: {Application.Current.Dispatcher.CheckAccess()}");
            LogDebug($"MainWindow state: {this.WindowState}");
            LogDebug($"MainWindow visibility: {this.Visibility}");
            LogDebug($"DataContext type: {(DataContext?.GetType().FullName ?? "null")}");
            LogDebug($"e.Cancel: {e.Cancel}");
            
            try
            {
                // Check if the DataContext is MainViewModel
                if (DataContext is MainViewModel viewModel)
                {
                    LogDebug("DataContext is MainViewModel");
                    
                    // Log any relevant properties or state from the ViewModel
                    LogDebug($"CurrentViewName: {viewModel.CurrentViewName}");
                    LogDebug($"CurrentViewModel type: {viewModel.CurrentViewModel?.GetType().FullName ?? "null"}");
                }
                else
                {
                    LogDebug($"DataContext is not MainViewModel, it is {DataContext?.GetType().Name ?? "null"}");
                }
                
                // Log active windows
                LogDebug("Active windows:");
                foreach (Window window in Application.Current.Windows)
                {
                    LogDebug($"Window: {window.GetType().FullName}, IsVisible: {window.IsVisible}, WindowState: {window.WindowState}");
                }
            }
            catch (Exception ex)
            {
                LogDebug($"Error in MainWindow_Closing: {ex.Message}", ex);
            }
        }

        private readonly IMessengerService _messengerService = null!;

        private void HandleWindowStateMessage(WindowStateMessage message)
        {
            LogDebug($"Received window state message: {message.Action}");

            try
            {
                switch (message.Action)
                {
                    case WindowStateMessage.WindowStateAction.Minimize:
                        LogDebug("Processing minimize action");
                        WindowState = WindowState.Minimized;
                        break;

                    case WindowStateMessage.WindowStateAction.Maximize:
                        LogDebug("Processing maximize action");
                        WindowState = WindowState.Maximized;
                        break;

                    case WindowStateMessage.WindowStateAction.Restore:
                        LogDebug("Processing restore action");
                        WindowState = WindowState.Normal;
                        break;

                    case WindowStateMessage.WindowStateAction.Close:
                        LogDebug("Processing close action");
                        Close();
                        break;

                    default:
                        LogDebug($"Unknown window state action: {message.Action}");
                        break;
                }
            }
            catch (Exception ex)
            {
                LogDebug($"Error handling window state message: {ex.Message}", ex);
            }
        }

        private readonly IServiceProvider _serviceProvider = null!;
        private readonly IThemeManager _themeManager = null!;

        protected override void OnSourceInitialized(EventArgs e)
        {
            LogDebug("OnSourceInitialized starting");
            try
            {
                base.OnSourceInitialized(e);
                LogDebug("Base OnSourceInitialized called");

                var helper = new WindowInteropHelper(this);
                if (helper.Handle == IntPtr.Zero)
                {
                    throw new InvalidOperationException("Window handle not available");
                }
                LogDebug("Window handle verified");

                // Initialize the window size manager to set size and center the window
                if (_windowSizeManager != null)
                {
                    _windowSizeManager.Initialize();
                    LogDebug("WindowSizeManager initialized");
                }
                else
                {
                    // Fallback if window size manager is not available
                    SetDynamicWindowSize();
                    LogDebug("Used fallback dynamic window sizing");
                }

                EnableBlur();
                LogDebug("Blur enabled successfully");
            }
            catch (Exception ex)
            {
                LogDebug("Error in OnSourceInitialized", ex);
                // Don't throw - blur is not critical
            }
        }
        
        /// <summary>
        /// Sets the window size dynamically based on the screen resolution
        /// </summary>
        private void SetDynamicWindowSize()
        {
            try
            {
                LogDebug("Setting dynamic window size");
                
                // Get the current screen's working area (excludes taskbar)
                var workArea = GetCurrentScreenWorkArea();
                
                // Get DPI scaling factor for the current screen
                double dpiScaleX = 1.0;
                double dpiScaleY = 1.0;
                
                try
                {
                    var presentationSource = PresentationSource.FromVisual(this);
                    if (presentationSource?.CompositionTarget != null)
                    {
                        dpiScaleX = presentationSource.CompositionTarget.TransformToDevice.M11;
                        dpiScaleY = presentationSource.CompositionTarget.TransformToDevice.M22;
                        LogDebug($"DPI scale factors: X={dpiScaleX}, Y={dpiScaleY}");
                    }
                }
                catch (Exception ex)
                {
                    LogDebug($"Error getting DPI scale: {ex.Message}", ex);
                }
                
                // Calculate available screen space
                double screenWidth = workArea.Width / dpiScaleX;
                double screenHeight = workArea.Height / dpiScaleY;
                double screenLeft = workArea.X / dpiScaleX;
                double screenTop = workArea.Y / dpiScaleY;
                
                // Calculate window size (75% of screen size with minimum/maximum constraints)
                double windowWidth = Math.Min(1600, screenWidth * 0.75);
                double windowHeight = Math.Min(900, screenHeight * 0.75);
                
                // Ensure minimum size for usability
                windowWidth = Math.Max(windowWidth, 1024);
                windowHeight = Math.Max(windowHeight, 700);
                
                // Set the window size
                this.Width = windowWidth;
                this.Height = windowHeight;
                
                // Center the window on screen
                this.Left = screenLeft + (screenWidth - windowWidth) / 2;
                this.Top = screenTop + (screenHeight - windowHeight) / 2;
                
                LogDebug($"Screen resolution: {screenWidth}x{screenHeight}, Window size set to: {windowWidth}x{windowHeight}");
                LogDebug($"Window centered at: Left={this.Left}, Top={this.Top}");
            }
            catch (Exception ex)
            {
                LogDebug($"Error setting dynamic window size: {ex.Message}", ex);
            }
        }
        
        /// <summary>
        /// Gets the working area of the screen that contains the window
        /// </summary>
        private Rect GetCurrentScreenWorkArea()
        {
            try
            {
                // Get the window handle
                var windowHandle = new WindowInteropHelper(this).Handle;
                if (windowHandle != IntPtr.Zero)
                {
                    // Get the monitor info for the monitor containing the window
                    var monitorInfo = new MONITORINFO();
                    monitorInfo.cbSize = Marshal.SizeOf(typeof(MONITORINFO));
                    
                    if (GetMonitorInfo(MonitorFromWindow(windowHandle, MONITOR_DEFAULTTONEAREST), ref monitorInfo))
                    {
                        // Convert the working area to a WPF Rect
                        return new Rect(
                            monitorInfo.rcWork.left,
                            monitorInfo.rcWork.top,
                            monitorInfo.rcWork.right - monitorInfo.rcWork.left,
                            monitorInfo.rcWork.bottom - monitorInfo.rcWork.top);
                    }
                }
            }
            catch (Exception ex)
            {
                LogDebug($"Error getting current screen: {ex.Message}", ex);
            }
            
            // Fallback to primary screen working area
            return SystemParameters.WorkArea;
        }
        
        [DllImport("user32.dll")]
        private static extern IntPtr MonitorFromWindow(IntPtr hwnd, uint dwFlags);
        
        [DllImport("user32.dll")]
        private static extern bool GetMonitorInfo(IntPtr hMonitor, ref MONITORINFO lpmi);
        
        private const uint MONITOR_DEFAULTTONEAREST = 2;
        
        [StructLayout(LayoutKind.Sequential)]
        private struct RECT
        {
            public int left;
            public int top;
            public int right;
            public int bottom;
        }
        
        [StructLayout(LayoutKind.Sequential)]
        private struct MONITORINFO
        {
            public int cbSize;
            public RECT rcMonitor;
            public RECT rcWork;
            public uint dwFlags;
        }

        private void EnableBlur()
        {
            LogDebug("EnableBlur starting");
            var windowHelper = new WindowInteropHelper(this);
            var accent = new AccentPolicy { AccentState = AccentState.ACCENT_ENABLE_BLURBEHIND };
            var accentStructSize = Marshal.SizeOf(accent);

            var accentPtr = IntPtr.Zero;
            try
            {
                accentPtr = Marshal.AllocHGlobal(accentStructSize);
                Marshal.StructureToPtr(accent, accentPtr, false);

                var data = new WindowCompositionAttributeData
                {
                    Attribute = WindowCompositionAttribute.WCA_ACCENT_POLICY,
                    SizeOfData = accentStructSize,
                    Data = accentPtr,
                };

                int result = SetWindowCompositionAttribute(windowHelper.Handle, ref data);
                if (result == 0)
                {
                    throw new InvalidOperationException("SetWindowCompositionAttribute failed");
                }
                LogDebug("Blur effect applied successfully");
            }
            catch (Exception ex)
            {
                LogDebug("Error enabling blur", ex);
                throw;
            }
            finally
            {
                if (accentPtr != IntPtr.Zero)
                {
                    Marshal.FreeHGlobal(accentPtr);
                }
            }
        }

        [DllImport("user32.dll")]
        internal static extern int SetWindowCompositionAttribute(
            IntPtr hwnd,
            ref WindowCompositionAttributeData data
        );

        [StructLayout(LayoutKind.Sequential)]
        internal struct AccentPolicy
        {
            public AccentState AccentState;
            public int AccentFlags;
            public int GradientColor;
            public int AnimationId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct WindowCompositionAttributeData
        {
            public WindowCompositionAttribute Attribute;
            public IntPtr Data;
            public int SizeOfData;
        }

        internal enum AccentState
        {
            ACCENT_DISABLED = 0,
            ACCENT_ENABLE_GRADIENT = 1,
            ACCENT_ENABLE_TRANSPARENTGRADIENT = 2,
            ACCENT_ENABLE_BLURBEHIND = 3,
            ACCENT_ENABLE_ACRYLICBLURBEHIND = 4,
            ACCENT_INVALID_STATE = 5,
        }

        internal enum WindowCompositionAttribute
        {
            WCA_ACCENT_POLICY = 19,
        }

        // Window control is now handled through ViewModel commands and messaging

        /// <summary>
        /// Updates the window and image icons based on the current theme
        /// </summary>
        private void UpdateThemeIcon()
        {
            if (_themeManager == null)
            {
                LogDebug("Cannot update theme icon: ThemeManager is null");
                return;
            }

            try
            {
                LogDebug($"Updating theme icon. Current theme: {(_themeManager.IsDarkTheme ? "Dark" : "Light")}");

                // Get the appropriate icon based on the theme
                string iconPath = _themeManager.IsDarkTheme
                    ? "pack://application:,,,/Resources/AppIcons/winhance-rocket-white-transparent-bg.ico"
                    : "pack://application:,,,/Resources/AppIcons/winhance-rocket-black-transparent-bg.ico";

                LogDebug($"Selected icon path: {iconPath}");

                // Create a BitmapImage from the icon path
                var iconImage = new BitmapImage(new Uri(iconPath, UriKind.Absolute));
                iconImage.Freeze(); // Freeze for better performance and thread safety

                // Set the window icon
                this.Icon = iconImage;
                LogDebug("Window icon updated");

                // Set the image control source
                if (AppIconImage != null)
                {
                    AppIconImage.Source = iconImage;
                    LogDebug("AppIconImage source updated");
                }
                else
                {
                    LogDebug("AppIconImage is null, cannot update source");
                }
            }
            catch (Exception ex)
            {
                LogDebug("Error updating theme icon", ex);

                // If there's an error, fall back to the default icon
                try
                {
                    var defaultIcon = new BitmapImage(new Uri("pack://application:,,,/Resources/AppIcons/winhance-rocket.ico", UriKind.Absolute));
                    this.Icon = defaultIcon;
                    if (AppIconImage != null)
                    {
                        AppIconImage.Source = defaultIcon;
                    }
                }
                catch (Exception fallbackEx)
                {
                    LogDebug("Error setting fallback icon", fallbackEx);
                }
            }
        }
        
        /// <summary>
        /// Handles mouse wheel events at the window level and redirects them to the ScrollViewer
        /// </summary>
        private void MainWindow_PreviewMouseWheel(object sender, MouseWheelEventArgs e)
        {
            // Find the ScrollViewer in the visual tree
            var scrollViewer = FindVisualChild<ScrollViewer>(this);
            if (scrollViewer != null)
            {
                // Redirect the mouse wheel event to the ScrollViewer
                if (e.Delta < 0)
                {
                    scrollViewer.LineDown();
                }
                else
                {
                    scrollViewer.LineUp();
                }
                
                // Mark the event as handled to prevent it from bubbling up
                e.Handled = true;
            }
        }
        
        /// <summary>
        /// Finds a visual child of the specified type in the visual tree
        /// </summary>
        private static T FindVisualChild<T>(DependencyObject obj) where T : DependencyObject
        {
            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++)
            {
                DependencyObject child = VisualTreeHelper.GetChild(obj, i);
                
                if (child != null && child is T)
                {
                    return (T)child;
                }
                
                T childOfChild = FindVisualChild<T>(child);
                if (childOfChild != null)
                {
                    return childOfChild;
                }
            }
            
            return null;
        }
    }
}
